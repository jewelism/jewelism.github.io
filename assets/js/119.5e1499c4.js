(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{435:function(t,s,a){"use strict";a.r(s);var n=a(18),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"표준-내장-객체"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#표준-내장-객체"}},[t._v("#")]),t._v(" 표준 내장 객체")]),t._v(" "),s("p",[t._v("표준 내장 객체(built-in 빌트인 객체 혹은 Standard Built-in object)는 ECMAScript 사양에 정의된 JavaScript 언어의 일부인 객체입니다. (예: String, Math, RegExp, Object, Function 등)")]),t._v(" "),s("h2",{attrs:{id:"bigint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bigint"}},[t._v("#")]),t._v(" BigInt")]),t._v(" "),s("p",[t._v("number는 최대 2^53-1 까지 표현할 수 있는 원시타입인데, 이것을 극복하기 위해서 만들어진 내장 객체이다.")]),t._v(" "),s("p",[t._v("거의 필요하지않았으므로.. 꽤 최근에 나온 스펙이다. caniuse를 잘 살펴보고 사용하자")]),t._v(" "),s("p",[t._v("사용방법은 아래와 같다.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bigInt1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("BigInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123123'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bigInt2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123123n")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nbigInt1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" bigInt2 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" bigInt1 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'bigint'")]),t._v("\n")])])]),s("p",[t._v("위처럼 명확히 number와 타입이 구분되어있고, 마치 primitive type처럼 비교도 가능하다.")]),t._v(" "),s("p",[t._v("다만 BigInt는 Math객체를 사용 할 수 없고, Number와 연산하면 안된다.")]),t._v(" "),s("p",[t._v("연산하려면 Number를 BigInt로 변환하는게 안전하다. BigInt를 Number로 변환하면 정확성을 보장할 수 없다.")]),t._v(" "),s("p",[t._v("그리고 기본적으로는 직렬화 할 수 없다. 하고싶다면 toJSON prototype을 구현하면 된다.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BigInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("toJSON")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);