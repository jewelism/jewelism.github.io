(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{429:function(t,a,e){"use strict";e.r(a);var s=e(18),r=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"object-literal-new-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-literal-new-object"}},[t._v("#")]),t._v(" Object literal, new Object")]),t._v(" "),a("h2",{attrs:{id:"객체-생성의-두가지-방법과-차이"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#객체-생성의-두가지-방법과-차이"}},[t._v("#")]),t._v(" 객체 생성의 두가지 방법과 차이")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("객체를 생성할때, new Object, {} 두 가지 방법으로 객체를 생성한다.\n두가지 방법에 대해 얼핏 봤을때 차이가 없어보이고, 일반적으로 리터럴 방법으로 객체를 생성한다.\n그리고 그 어디에도 이런 차이점에 대해서는 별로 설명하고 있지않다.\n(사실 내용이 별로 없고 당연해서 설명할 필요도 없긴하다.)\n하여튼 차이점에 대해 아래에 정리해보려고한다.\n")])])]),a("h2",{attrs:{id:"new-연산자를-사용해서-객체를-만드는-경우"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#new-연산자를-사용해서-객체를-만드는-경우"}},[t._v("#")]),t._v(" new 연산자를 사용해서 객체를 만드는 경우")]),t._v(" "),a("h3",{attrs:{id:"유리한점"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#유리한점"}},[t._v("#")]),t._v(" 유리한점")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("프로토타입상속을 활용할때 유용하다.\n(리터럴 구문으로 객체를 생성하면 상속체인을 관리하기 힘들다.)\n프로토타입 메소드가 많다고 가정하면 이해하기쉽다.\n")])])]),a("h3",{attrs:{id:"불리한점"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#불리한점"}},[t._v("#")]),t._v(" 불리한점")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("실제로 얼마 차이가 나진않지만 코드가 더 길고 귀찮다.\n객체를 생성할때 속도가 리터럴 방식보다 느리다.\n")])])]),a("p",[t._v("끄읏.")])])}),[],!1,null,null,null);a.default=r.exports}}]);